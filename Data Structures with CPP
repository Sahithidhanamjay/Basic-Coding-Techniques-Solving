1.	CREATION OF VECTOR >>>
#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v;   //vector creation
	cout<<v.size(); //size of vector printing
	v.push_back(9); // adding element in vector at back
	cout<<v.size(); 
	v.pop_back();	//removing element in vector at back
	
	
}



2.	Creating vector, adding, removing data>>>
#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v;   //vector creation
	int i=0;
	int d=0;
	for(i=0;i<5;i++)
	{
		cin>>d;
		v.push_back(d);
	}	
	for(i=0;i<v.size();i++)
	{
		cout<<v[i]<<" ";//printing the data from the vector
	}
	
}
#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v;   //vector creation
	int i=0;
	int d=0;
	for(i=0;i<5;i++)
	{
		cin>>d;
		v.push_back(d);
	}	
	cout<<"Before pop";
	for(i=0;i<v.size();i++)
	{
		cout<<v[i]<<" ";//printing the data from the vector
	}
	v.pop_back();
	cout<<"After pop";
	for(i=0;i<v.size();i++)
	{
		cout<<v[i]<<" ";//printing the data from the vector
	}
}



3.	Last element of vector>>>
#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v;   //vector creation
	int i=0;
	int d=0;
	for(i=0;i<5;i++)
	{
		cin>>d;
		v.push_back(d);
	}	
	cout<<"Before pop\n";
	for(i=0;i<v.size();i++)
	{
		cout<<v[i]<<"\n";//printing the data from the vector
	}
	cout<<v.back();
} 



4.	Dynamic array v=creation and printing the element value at a specific value position>>>
#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v(100);  
	vector<float>v1;
	vector<string>v2;
	cout<<v.size();
	cout<<"\n";
	cout<<v[23];
	
}



5.	Printing the first element through iterator of vector>>
#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v(100,1);  
	cout<<*v.begin();
}

o/p: 1

#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v(100,1);
	v[0]=90;
	cout<<*v.begin();
}



6.	Printing all the value in the vector using begin and end.
// Online C++ compiler to run C++ program online
#include <iostream>
#include<vector> 
using namespace std;
int main() {
    vector<int>v(100,1);
	v[0]=90;
	for(auto i = v.begin();i!=v.end();i++)
	{
		cout<<*i<<" ";
	}

    return 0;
}


7.  Insert an element
#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v(100,1);
	v.insert(v.begin()+20,200);
	cout<<v[20];
	cout<<"\n";
	cout<<v.size();
}


8. Erase an element
#include<iostream>
#include<vector>
using namespace std;
int main()
{
	vector<int>v(100,1);
	v.erase(v.begin()+20);
	cout<<v[20];
}


9.  Unordered_map>>>
#include <bits/stdc++.h>
using namespace std;
int main() {
    unordered_map<string,int>d;
    vector<int>v={1,1,1,2,3,4,3,4,5,6,7,7};
    for(int i=0;i<v.size();i++)
    {
        d[v[i]]+=1;
    }
    
    d['a']=10;
    for(auto i:d)
    {
        cout<<i.first<<" "<<i.second<<endl;
    }

    return 0;
}



10.	sorting the vector>>>
using namespace std;
int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    int n;
    cin>>n;
    int j=0;
    vector<int>ar;
    for(int i=0;i<n;i++)
    {
        cin>>j;
        ar.push_back(j);
    }  
    sort(ar.begin(),ar.end());
    for(int i=0;i<n;i++)
    {
        cout<<ar[i]<<" ";
    }
    return 0;
}


11.	STACK OPERATIONS>>>
#include<bits/stdc++.h>
using namespace std;
int main()
{
	stack<int>st;
	st.push(4);
	st.push(5);
	st.pop();
	st.push(10);
	st.push(11);
	st.pop();
	st.pop();
	st.push(-3);
	st.push(13);
	
	cout<<st.top()<<"\n";
	cout<<"The elements in the stack are:\n";
	while(!st.empty())
	{
		cout<<st.top()<<"\n";
		st.pop();
	}
}

12.	Solving or evaluating the equation by using stacks in c++.
#include<bits/stdc++.h>
using namespace std;

int priority(char op)
{
	if(op=='+' || op=='-')
	return 1;
	else
	return 2;
}


int evaluate(int n1,int n2,char op)
{
	if(op=='+')return n1+n2;
	if(op=='-')return n1-n2;
	if(op=='*')return n1*n2;
}

int main()
{
	string s;
	cin>>s;
	stack<int>snum;
	stack<char>sope;
	for(int i=0;i<s.size();i++)
	{
		if(s[i]<='9' and s[i]>='0')
		{
			int n=0;
			while(s[i]<='9' and s[i]>='0')
			{
				n=n*10+int(s[i]-'0');
				i=i+1;
			}
			snum.push(n);
			i=i-1;
		}
		else
		{
			if(sope.empty())
			{
				sope.push(s[i]);
			}
			else
			{
				if (priority(s[i])>priority(sope.top()))
				{
					sope.push(s[i]);
				}
				else
				{
					
					while(priority(s[i])<=priority(sope.top()))
					{
						int n1=snum.top();
						snum.pop();
						int n2=snum.top();
						snum.pop();
						int ans = evaluate(n2,n1,sope.top());
						sope.pop();
						snum.push(ans);
					}
				}
			}
		}
	}
	while(!sope.empty())
	{
		int n1=snum.top();
		snum.pop();
		int n2=snum.top();
		snum.pop();
		int ans = evaluate(n2,n1,sope.top());
		sope.pop();
		snum.push(ans);
	}
	cout<<snum.top();
	
}


13. #include<bits/stdc++.h>
using namespace std;
int main()
{
	int arr[4] = {1,2,3,4};
	int x = 4;
	
	int length = 4;

//	}	//n(2^n)
	for(int i=0;i<pow(2,length);i++)
	{
		int index=0;
		int n=length;
		while(n)
		{
			n--;
			if(i&(int)pow(2,n))
			{
				cout<<arr[index]<<" ";
			}
			index++;
		}
	cout<<endl;

	}
	
}



14. Vector:
•	push_back()It traverse from the starting and reaches to the end and the add at the last.
•	emplace_backdirect at the last it will start on form the traversing from the starting.

Recursion:
•	There are 4 types of recursions
o	Tail Recursion
o	Head Recursion
o	Nested Recursion
o	Tree Recursion


15. Printing the subsequence of an array
#include<bits/stdc++.h>
using namespace std;
void subseq(vector<int>v,int index,int size,vector<int>ans)
{
	if(index>=size)
	{
		for(int i=0;i<ans.size();i++)
		{
			cout<<ans[i]<<" ";	
		}
		cout<<endl;
		return ;
	}

	int f = 0;
	if (ans.size() == 0)
	{
		ans.push_back(v[index]);
		subseq(v,index+1,size,ans);
		ans.pop_back();
	}
	else if(ans.back() < v[index])
	{
		ans.push_back(v[index]);
		subseq(v,index+1,size,ans);
		ans.pop_back();
	}
	else if(ans.back() > v[index])
	{
		subseq(v,index+1,size,ans);
		f+=1;
	}
	if (f!=1)
	subseq(v,index+1,size,ans);
	
}

int main()
{
	vector<int>v;
	v.push_back(0);
	v.push_back(8);
	v.push_back(7);
	v.push_back(1);
	v.push_back(2);

	subseq(v,0,v.size(),{});

}

Method – 2:
#include<bits/stdc++.h>
using namespace std;
void subseq(vector<int>v,int index,int size,vector<int>ans)
{
	if(index>=size)
	{
		for(int i=0;i<ans.size();i++)
		{
			cout<<ans[i]<<" ";	
		}
		cout<<endl;
		return ;
	}

	if (ans.size() == 0||ans.back() < v[index])
	{
		ans.push_back(v[index]);
		subseq(v,index+1,size,ans);
		ans.pop_back();
	}
	else if(ans.back() > v[index])
	{
		subseq(v,index+1,size,ans);
		return;
	}
	subseq(v,index+1,size,ans);
	
}

int main()
{
	vector<int>v;
	v.push_back(0);
	v.push_back(8);
	v.push_back(7);
	v.push_back(1);
	v.push_back(2);

	subseq(v,0,v.size(),{});
}



16.	Linked list creation and insertion of an element
#include<bits/stdc++.h>
using namespace std;
class Node
{
	public:
		int data;
		Node* next;
		Node(int data)
		{
			this->data = data;
			this->next = NULL;
		}
};

int main()
{
	Node* t1 = new Node(10);
	Node* t2 = new Node(20);
	Node* t3 = new Node(90);
	t1->next = t2;
	t2->next = t3;
	Node* copy = t1;
	int data = 119;
	int position = 2;
	while(position-2>0)
	{
		copy = copy->next;
		position-=1;
	}
	Node* y = copy->next;
	Node* z = new Node(data);
	copy->next = z;
	z->next = y;
	
	while(t1!=NULL)
	{
		cout<<t1->data<<" ";
		t1=t1->next;
	}
}




17.	Dynamic creation of the linked list>>>
#include<bits/stdc++.h>
using namespace std;
class Node
{
	public:
		int data;
		Node* next;
		Node(int data)
		{	
			this -> data = data;
			this -> next = NULL;
		}
};
int main()
{
	int n,x;
	cin>>n;
	Node* head = new Node(0);
	Node* temp = head;
	for(int i=0;i<n;i++)
	{
		cin>>x;
		Node* BC = new Node(x);
		temp->next=BC;
		temp=temp->next;
	}
	while(head!=NULL)
	{
		cout<<head->data<<" ";
		head=head->next;
	}
}
Method – 2:
Without dummie variable…

#include<bits/stdc++.h>
using namespace std;
class Node
{
	public:
		int data;
		Node* next;
		Node(int data)
		{	
			this -> data = data;
			this -> next = NULL;
		}
};
int main()
{
	int n,x;
	cin>>n;
	Node* head = NULL ;
	Node* temp = NULL ;
	for(int i=0;i<n;i++)
	{
		cin>>x;
		if(head==NULL)
		{
			head = new Node(x);
			temp=head;
		}
		else
		{
			temp->next=new Node(x);
			temp = temp->next;
		}
	}
	while(head!=NULL)
	{
		cout<<head->data<<" ";
		head = head->next;
	}
}


18.  Reversing the Linked list>>>
#include<bits/stdc++.h>
using namespace std;
class Node
{
	public:
		int data;
		Node* next;
		Node(int data)
		{	
			this -> data = data;
			this -> next = NULL;
		}
};


Node* reverseLinkedList(Node* head)
{
	Node* p = NULL;
	Node* c = head;
	Node* n = NULL;
	while(c!=NULL)
	{
		n = c->next;
		c->next = p;
		p=c;
		c=n;
	}
	return p;
}
int main()
{
	int n,x;
	cin>>n;
	Node* head = NULL ;
	Node* temp = NULL ;
	for(int i=0;i<n;i++)
	{
		cin>>x;
		if(head==NULL)
		{
			head = new Node(x);
			temp=head;
		}
		else
		{
			temp->next=new Node(x);
			temp= temp->next;
		}
	}
	
	head = reverseLinkedList(head);
	
	while(head!=NULL)
	{
		cout<<head->data<<" ";
		head=head->next;
	}
}


19.1.	Combinations 
#include<bits/stdc++.h>
using namespace std;
void Solve(vector<int>num,int index,vector<int>ans,int target,int size,int mysum)
{
	if(index>=size && mysum!=target)
	{
		return;
	}
	else if(mysum==target)
	{
		for(int i=0;i<ans.size();i++)cout<<ans[i]<<" ";
		cout<<endl;
		return;
	}
	else if(mysum>target)return;
	ans.push_back(num[index]);
	Solve(num,index+1,ans,target,size,mysum+num[index]);
	ans.pop_back();
	Solve(num,index+1,ans,target,size,mysum);
	
	{
		
	}
}
int main()
{
	int n,x,target;
	cin>>n;
	vector<int>num;
	for(int i=0;i<n;i++)
	{
		cin>>x;
		num.push_back(x);
	}
	cin>>target;
	sort(num.begin(),num.end());
	Solve(num,0,{},target,n,0);
}




20.1.	Construction of a tree
#include<bits/stdc++.h>
using namespace std;
class TreeNode{
	public:
	int data;
	TreeNode* left;
	TreeNode* right;
	TreeNode(int data)
	{
		this->data=data;
		this->left=NULL;
		this->right=NULL;
	}
};

void Construct(vector<int>v,int index,TreeNode* root,int size)
{
	if(root==NULL)return;
	if(2*index+1 >= size)return;
	root->left=new TreeNode(v[2*index+1]);
	Construct(v,2*index+1,root->left,size);
	if(2*index+2 >=size)return;
	root->right = new TreeNode(v[2*index+2]);
	Construct(v,2*index+2,root->right,size);
}


void printTree(TreeNode* root)
{
	if(root==NULL)return;
	printTree(root->left);
	cout<<root->data<<" ";
	printTree(root->right);
}

int main()
{
	int n,x;
	cin>>n;
	vector<int>v;
	for(int i=0;i<n;i++)
	{
		cin>>x;
		v.push_back(x);
	}
	TreeNode* root = new TreeNode(v[0]);
	Construct(v,0,root,v.size());
	printTree(root);
}



21. 
