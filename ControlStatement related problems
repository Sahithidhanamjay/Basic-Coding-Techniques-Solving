1.	Party of couples (GFG)
  class Solution:
    def findSingle(self, n, arr):
        # code here
        v=0
        for i in arr:
            v=v^i
        return v 

2.	Count the elements(gFg)
  np=[0]*(n+1)
        for i in b:
            if i<=n:
                np[i]+=1
        for i in range(1,n+1):
            np[i]+=np[i-1]
        o=[]
        for i in query:
            o.append(np[a[i]])
        return o

3.	Time need to buy ticket(2073)
  class Solution:
    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:
        n = len(tickets)
        time = 0
        if tickets[k] == 1:
            return k + 1
        while tickets[k] > 0:
            for i in range(n):
                if tickets[i] != 0:
                    tickets[i] -= 1
                    time += 1
                if tickets[k] == 0:
                    return time;

        return time

4.	Maximum nesting depth of the paranthesis(1614)
class Solution:
    def maxDepth(self, s: str) -> int:
        c=0
        mc=0
        for i in s:
            if i=='(':
                c+=1
                if mc<c:
                    mc=c
            if i==')':
                c-=1
        return mc



5.	Find all duplicates of an array(442):
  class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        l=set()
        r=set()
        for i in nums:
            if i not in l:

                l.add(i)
            else:
                r.add(i)
        return r



6.	Intersection of two arrays(349)
  class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        l=list(set(nums1).intersection(set(nums2)))
        l1=list(set(nums2).intersection(set(nums1)))
        return list(set(l+l1))


7.	Bulls and cows(299)
  class Solution:
    def getHint(self, secret: str, guess: str) -> str:
        r="xAyB"
        c=0
        s=[i for i in secret]
        g=[i for i in guess]
        for i in g:
            if i in s:
                c+=1
                s.remove(i)
        c1=0
        for i in range(len(secret)):
            if secret[i]==guess[i]:
                c1+=1
        c=c-c1
        r=r.replace('x',str(c1))
        r=r.replace('y',str(c))
        return r


8.	Excel sheet column title(168)
  class Solution:
    def convertToTitle(self, columnNumber: int) -> str:
        a='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        def excel(n):
            if n<26:
                return a[n-1]
            else:
                q,r=n//26,n%26
                if r==0:
                    if q==1:
                        return a[r-1]
                    else:
                        return excel (q-1)+a[r-1]
                else:
                    return excel (q)+a[r-1]
        r=excel(columnNumber)
        return r

9.	Number Complement(476)
  class Solution:
    def findComplement(self, num: int) -> int:
        b=bin(num)
        l=[]
        for i in b[2:]:
            if i=='0':
                l.append('1')
            elif i=='1':
                l.append('0')
        s="".join(l)
        return int(s,2)


10.	Minimum Sum of Four Digit Number after Splitting Digits(2160)
class Solution:
    def minimumSum(self, num: int) -> int:
        n=sorted([i for i in str(num)])
        s=[]
        i=0
        j=len(n)-1
        while True:
            if i<j:
                s.append(int(n[i]+n[j]))
                i+=1
                j-=1
            else:
                return sum(s)

11.Thousand Seperators(1556)
class Solution:
    def thousandSeparator(self, n: int) -> str:
       s=str(n)
       s=s[::-1]
       r='.'.join(s[i:i+3]for i in range(0,len(s),3))
       return r[::-1]



12.	Find Smallest Letter greater than target(744)
class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        l=len(arr)
        m=-1
        for i in range(l-1,-1,-1):
            c=arr[i]
            arr[i]=m
            m=max(m,c)
        return arr



13.	Replace Elements with greatest element on right side(1299)
Method – I:
class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        l=len(arr)
        m=-1
        for i in range(l-1,-1,-1):
            c=arr[i]
            arr[i]=m
            m=max(m,c)
        return arr

Method – II:
  m = -1
        for i in range(len(arr)-1, -1, -1):
            if arr[i] > m:
                m, arr[i] = arr[i], m
            else:
                arr[i] = m
        return arr



14.	Number of students doing homework at a given time(1450)
class Solution:
    def targetIndices(self, nums: List[int], target: int) -> List[int]:
        nums=sorted(nums)
        l=[]
        for i in range(len(nums)):
            if nums[i]==target:
                l.append(i)
        return l



15.	Destination city(1436)
class Solution:
    def destCity(self, paths: List[List[str]]) -> str:
        dc,ac=set(),set()
        for u,v in paths:
            ac.add(u)
            dc.add(v)
        return (dc-ac).pop()


16.	Missing Number(268)
class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        for i in range(0,len(nums)):
            if i not in nums:
                return i
        return max(nums)+1
	Method – 2:
	n=len(nums)
	return (n*(n+1)//2)-sum(nums)




17.	HandShake’s(OC)
t=int(input())
for i in range(t):
    n=int(input())
    print(n*(n-1)//2)


18.	Least number of unique integers after k  removals.
class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:
        d={}
        for i in arr:
            if i not in d:
                d[i]=1
            else:
                d[i]+=1
        c=len(d)
        for i in sorted(d.values()):
            k-=i
            if k<0:
                return c
            else:
                c-=1
        return c

19.	Nim Game(292)
  class Solution:
    def canWinNim(self, n: int) -> bool:
        return n%4!=0

20.	Sum of squares(633)
  class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        i=0
        j=int(math.sqrt(c))
        while(i<=j):
            s=(i*i)+(j*j)
            if s==c:
                return True
            elif c>s:
                i+=1
            else:
                j-=1
        return False


21.	Replace all digits with characters(1844)
  class Solution:
    def replaceDigits(self, s: str) -> str:
        for i in range(len(s)):
            if s[i].isdigit():
                v=ord(s[i-1])+int(s[i])
                s=s.replace(s[i],chr(v),1)
        return "".join(s)

22.	Sum of square of special elements(2778)
  class Solution:
    def sumOfSquares(self, nums: List[int]) -> int:
        s=0
        l=len(nums)
        for i in range(len(nums)):
            if l%(i+1)==0:
                s+=nums[i]**2
        return s


23.	Minimum Common Value(2540)
  class Solution:
    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:
        l=[0]
        if set(nums1).intersection(set(nums2)) != set():
            l.append(min(set(nums1).intersection(set(nums2))))
        if len(l)>1:
            l.remove(0)
            return min(l)
        else:
            return -1


24.	Sum of unique Elements(1748)
  class Solution:
    def sumOfUnique(self, nums: List[int]) -> int:
        s=0
        for i in nums:
            if nums.count(i)==1:
                s+=i
        return s


25.	Left and Right sum difference(2574)
  class Solution:
    def leftRightDifference(self, nums: List[int]) -> List[int]:
        l=[]
        if len(nums)>1:
            for i in range(len(nums)):
                l.append(abs(sum(nums[:i])-sum(nums[i+1:])))
            return l
        else:
            return [0]


26.	Count Asterisks(2315)
  class Solution:
    def countAsterisks(self, s: str) -> int:
        l=s.split('|')
        c=0
        if len(l)==0:
            return 0
        for i in range(0,len(l),2):
            c+=l[i].count('*')
        return c        


27.	Count Asterisks(2315)
  class Solution:
    def countAsterisks(self, s: str) -> int:
        l=s.split('|')
        c=0
        if len(l)==0:
            return 0
        for i in range(0,len(l),2):
            c+=l[i].count('*')
        return c        

28.	Combination(77)
  from itertools import combinations
  class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        v=[i for i in range(1,n+1)]
        return list(combinations(v,k))

29.	Number of senior citizens(2678)
  class Solution:
    def countSeniors(self, details: List[str]) -> int:
        cnt=0
        for i in details:
            if int(i[11:13])>60:
                cnt+=1
        return cnt

30.	Number of changing keys(3019)
  class Solution:
    def countKeyChanges(self, s: str) -> int:
        s=s.lower()
        cnt=0
        for i in range(len(s)-1):
            if s[i]!=s[i+1]:
                cnt+=1
        return cnt


31.	Find first palindromic string in an array(2108)
  class Solution:
    def firstPalindrome(self, words: List[str]) -> str:
        for i in words:
            if i==i[::-1]:
                return i
        return""


32.	Maximum 69 Number(1323)
  class Solution:
    def maximum69Number (self, num: int) -> int:
        num=str(num)
        num=num.replace('6','9',1)
        return int(num)

33.	Smallest index with equal values(2057)
  class Solution:
    def smallestEqual(self, nums: List[int]) -> int:
        for i in range(len(nums)):

            if i%10==nums[i]:
                return i
        return -1

34.	Find the town judge(997)
  class Solution:
    def findJudge(self, n: int, trust: List[List[int]]) -> int:
        l=[0]*(n+1)
        for a,b, in trust:
            l[a]-=1
            l[b]+=1
        for i in range(1,n+1):
            if l[i]==(n-1):
                return i
        return(-1)


35.	Find the peaks(2951)
  class Solution:
    def findPeaks(self, mountain: List[int]) -> List[int]:
        l=[]
        for i in range(1,len(mountain)-1):
            if mountain[i]>mountain[i-1] and mountain[i]>mountain[i+1]:
                l.append(i)
        return l

36.	Contains Duplicates(219)  
  class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        d={}
        for i,j in enumerate(nums):
            if j in d and abs(i-d[j])<=k:
                return True
            d[j]=i
        return False

37.	Ransom Notes(383)
  class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        for i in ransomNote:
            if i not in magazine or  ransomNote.count(i)>magazine.count(i):
                return False
        return True

38.	Single Number II(137)
  class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        for i in nums:

            if nums.count(i)==1:
                return i
        return 0

39.	Reverse Words in a string(151)
  class Solution:
    def reverseWords(self, s: str) -> str:
        l=s.split()[::-1]
        return " ".join(l)

40.	Valid Triangle Number(611)
  class Solution:
    def triangleNumber(self, nums: List[int]) -> int:
        nums.sort()
        c=0
        n=len(nums)
        for i in range(n-1,1,-1):
            l,r=0,i-1
            while l<r:
                if nums[l]+nums[r]>nums[i]:
                    c+=r-l
                    r-=1
                else:
                    l+=1
        return c


41.	Valid Boomerang(1037)
  class Solution(object):
    def isBoomerang(self, points):
        """
        :type points: List[List[int]]
        :rtype: bool
        """
        [x1,y1],[x2,y2],[x3,y3]=points   
        v=(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))
        if v!=0:
            return True
        return False


42.	Generate parenthesis combinations in python
  def evaluate(cl,op,s,n):
    if cl+op==(n*2):
        print(s)
    if cl>op:
        return
    if op==n:
        evaluate(cl+1,op,s+')',n)
    else:
        evaluate(cl,op+1,s+'(',n)
        evaluate(cl+1,op,s+')',n)


  n=int(input("Enter a numbe:"))
  evaluate(0,1,'(',n)


43.	Count Numbers with 	Unique digits(357)
  class Solution:
    def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n==8:
            return 2345851
        v=10**n
        c=0
        for i in range(10,v):
            l=[j for j in str(i)]
            if len(set(l))!=len(l):
                c+=1
        return v-c

44.	Divide two integers(29)
  class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        if dividend==-2147483648 and divisor==-1:
            return 2147483647
        if dividend<0 and divisor<0:
            return dividend//divisor
        if dividend<0:
            m1=-1*dividend
            return -1*(m1//divisor)
        if divisor<0:
            m2=-1*divisor
            return -1*(dividend//m2)      
        return dividend//divisor

45.
